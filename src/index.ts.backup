#!/usr/bin/env node

/**
 * Gitea MCP Server v2.0 - Entry Point
 * 
 * This is the main entry point for the Gitea Model Context Protocol (MCP) Server.
 * The server provides 10 multifunctional tools for comprehensive Gitea repository management.
 * 
 * USAGE:
 * - Run directly: node dist/index.js
 * - Via NPX: npx @andrebuzeli/gitea-mcp-v2
 * - As binary: gitea-mcp-v2
 * 
 * REQUIREMENTS:
 * - Node.js 18.0.0 or higher
 * - GITEA_URL environment variable
 * - GITEA_TOKEN environment variable
 * 
 * CONFIGURATION:
 * Set the following environment variables before running:
 * - GITEA_URL: Your Gitea instance URL (e.g., http://localhost:3000)
 * - GITEA_TOKEN: Your personal access token from Gitea
 * - GITEA_USERNAME: Your Gitea username (optional)
 * - DEBUG: Set to 'true' for detailed logging (optional)
 * - TIMEOUT: Request timeout in milliseconds (optional, default: 30000)
 * 
 * TROUBLESHOOTING:
 * - Ensure your Gitea token has sufficient permissions
 * - Check that your Gitea instance is accessible
 * - Enable DEBUG mode for detailed error information
 * - Verify Node.js version compatibility
 */

import { GiteaMCPServer } from './server.js';

/**
 * Main function - Initialize and start the Gitea MCP Server
 * 
 * This function creates a new GiteaMCPServer instance and starts it.
 * It handles initialization errors gracefully and exits with appropriate codes.
 * 
 * ERROR HANDLING:
 * - Configuration errors: Exit code 1
 * - Network errors: Exit code 1
 * - Permission errors: Exit code 1
 * - Unknown errors: Exit code 1
 */
async function main(): Promise<void> {
  try {
    // Create new server instance
    // This will validate configuration and setup all tools
    const server = new GiteaMCPServer();
    
    // Start the server and connect to stdio transport
    // The server will be ready to receive MCP requests
    await server.run();
  } catch (error) {
    // Log initialization errors without emoji for better compatibility
    console.error('Failed to start Gitea MCP Server:', error);
    process.exit(1);
  }
}

/**
 * Start the server with global error handling
 * 
 * This ensures any unhandled errors during server startup are caught
 * and logged appropriately before terminating the process.
 * 
 * BEST PRACTICES:
 * - Always handle async errors in main entry points
 * - Provide clear error messages for troubleshooting
 * - Use appropriate exit codes for process managers
 */
main().catch((error) => {
  console.error('Fatal error during server startup:', error);
  process.exit(1);
});
